package com.atlassian;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.concurrent.*;

import static org.junit.jupiter.api.Assertions.*;

class SlidingWindowRateLimiterStrategyTest {

    @Test
    public void should_allow_when_request_number_within_limit(){

        SlidingWindowRateLimiterStrategy rateLimiterStrategy= new SlidingWindowRateLimiterStrategy(1,5);

        for(int counter=0;counter<5;counter++){
            assertTrue(rateLimiterStrategy.isAllowed());
        }

    }


    @Test
    public void should_not_allow_when_request_number_more_than_limit(){

        SlidingWindowRateLimiterStrategy rateLimiterStrategy= new SlidingWindowRateLimiterStrategy(1,5);

        boolean[] actualResult= new boolean[7];
        for(int counter=0;counter<7;counter++){
            actualResult[counter]= rateLimiterStrategy.isAllowed();
        }
        boolean[] expectedResult= new boolean[7];
        Arrays.fill(expectedResult,true);
        expectedResult[5]=false;
        expectedResult[6]=false;

        assertArrayEquals(expectedResult,actualResult);


    }

    @Test
    public void should_allow_when_request_number_in_single_window_less_than_limit() throws InterruptedException {

        SlidingWindowRateLimiterStrategy rateLimiterStrategy= new SlidingWindowRateLimiterStrategy(1,5);

        boolean[] actualResult= new boolean[25];

        for(int windowCounter=0;windowCounter<5;windowCounter++){
            Thread.sleep(1000);
            for(int counter=0;counter<5;counter++){
                actualResult[windowCounter*5+counter]= rateLimiterStrategy.isAllowed();
            }
        }
        boolean[] expectedResult= new boolean[25];
        Arrays.fill(expectedResult,true);


        assertArrayEquals(expectedResult,actualResult);


    }


    @Test
    public void should_not_allow_edge_requests_when_request_number_in_single_window_more_than_limit() throws InterruptedException {

        SlidingWindowRateLimiterStrategy rateLimiterStrategy= new SlidingWindowRateLimiterStrategy(1,4);

        boolean[] actualResult= new boolean[25];

        for(int windowCounter=0;windowCounter<5;windowCounter++){
            Thread.sleep(1000);
        for(int counter=0;counter<5;counter++){
            actualResult[windowCounter*5+counter]= rateLimiterStrategy.isAllowed();
        }
        }
        boolean[] expectedResult= new boolean[25];
        Arrays.fill(expectedResult,true);
        expectedResult[4]=false;
        expectedResult[9]=false;
        expectedResult[14]=false;
        expectedResult[19]=false;
        expectedResult[24]=false;


        assertArrayEquals(expectedResult,actualResult);


    }

    @Test
    public void should_allow_requests_when_request_number_in_limit_for_concurrent_threads() throws InterruptedException, ExecutionException {

        SlidingWindowRateLimiterStrategy rateLimiterStrategy= new SlidingWindowRateLimiterStrategy(1,1000);

        ExecutorService executorService= Executors.newFixedThreadPool(1000);

        List<Callable<Boolean>> taskList= new ArrayList<>();
        for(int counter=0;counter<1000;counter++){
            taskList.add(()->rateLimiterStrategy.isAllowed());

        }

        List<Future<Boolean>> actualResult= executorService.invokeAll(taskList);

        Thread.sleep(1000);
        for (Future<Boolean> eachOutput:actualResult){
            assertTrue(eachOutput.get());
        }


    }

    @Test
    public void testMock() throws InterruptedException {
        SlidingWindowRateLimiterStrategy strategy= new SlidingWindowRateLimiterStrategy(1,5);

        ScheduledExecutorService scheduledExecutorService= Executors.newScheduledThreadPool(10);


        List<Future<Boolean>> actual= new ArrayList<>();
        actual.add(scheduledExecutorService.schedule(()->strategy.isAllowed(),0,TimeUnit.MILLISECONDS));
        actual.add(scheduledExecutorService.schedule(()->strategy.isAllowed(),100,TimeUnit.MILLISECONDS));
        actual.add(scheduledExecutorService.schedule(()->strategy.isAllowed(),200,TimeUnit.MILLISECONDS));
        actual.add(scheduledExecutorService.schedule(()->strategy.isAllowed(),300,TimeUnit.MILLISECONDS));
        actual.add(scheduledExecutorService.schedule(()->strategy.isAllowed(),400,TimeUnit.MILLISECONDS));
        Thread.sleep(1100);
        actual.add(scheduledExecutorService.submit(()->strategy.isAllowed()));
        actual.add(scheduledExecutorService.submit(()->strategy.isAllowed()));
        actual.add(scheduledExecutorService.submit(()->strategy.isAllowed()));


        Thread.sleep(1000);
        actual.forEach(e-> {
            try {
                System.out.println(e.get());
            } catch (InterruptedException ex) {
                throw new RuntimeException(ex);
            } catch (ExecutionException ex) {
                throw new RuntimeException(ex);
            }
        });
        //scheduledExecutorService.schedule()


    }
}
